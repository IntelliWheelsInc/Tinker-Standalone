Abacus Project
Intelliwheels 2015

Services Documentation

-------------------------------------------------------------------------

Change Log:
5/14/15 - Scott Blessing - Created File

-------------------------------------------------------------------------

This documentation will cover all of the SERVICES (Static Facories), FACTORIES, and CONSTANTS used in the Abacus project.  For this project, we have been using a "Factories as Objects" methodology.  What this means is that each Factory can be considered the same as a Java object.  The Services all work as a collection of global variables and methods.  Constants are self-explainitory.

-------------------------------------------------------------------------

Contents:
1) Factories
1a) Color
1b) Option
1c) Part
1d) Measure
1e) Frame
1f) Wheelchair
1g) PreviewImage
1h) Order

2) Services (Static Factories)
2a) FrameData
2b) User
2c) Unit
2d) Angle
2e) SyncJSON

3) Constants
3a) Cost
3b) Bank

-------------------------------------------------------------------------

1a) Color (colorFactory.js)

A Color is an available color for an Option. Once a new Color object is created, its members should not be modified - only accessed.

Member Variables:
colorID - A unique ID used to identify the specific Color object.
name - The name to be displayed for the color.
hex - A hex value for the represented color.

public functions:
Getters: getID(), getName()
getHex() - Returns hex as a CSS friendly string
getHexValue() - Returns hex as a javascript hex value

-------------------------------------------------------------------------

1b) Option (optionFactory.js)

An Option is an available Option for a Part.  For example, if a Part is the backrest, then it's options would be carbon fiber, plastic, or upholstery.  Once a new Option object is created, its members should not be modified - only accessed.

Member Variables:
optionID - A unique ID used to identify the specific Option object.
price - Price difference from the base price, for this option. (in USD)
name - name displayed for this option.
thumbnailURL - A URL string for the thumbnail image displayed for this option.
desc - A description of this option to be displayed in a panel.
weight - Weight difference from the base weight, for this option. (in lbs)
colors - An array of Color objects, which are selectable colors for this option.
defaultColorID - The ID of the default Color object for this option. 0, if colors is empty.

public functions:
Getters: getID(), getName(), getPrice(), getWeight(), getThumbnailURL(), getDefaultColorID(), getColors()
getNumColors() - Returns the length of colors array
getColor(colID) - Searches colors for Color with colorID = colID. If found returns Color object, else returns null
getColorByName(colName) - Searches colors for Color with name = colName. If found returns Color object, else returns null
getColorByIndex(index) - Returns colors[index], if index is within array bounds
getDefaultColor() - Returns color with colorID = defaultColorID

-------------------------------------------------------------------------

1c) Part (partFactory.js)

A Part is an available part for a Frame.  Parts include Backrest, Wheel, Handrail, etc. Once a new Part Object is created, its members should not be modified - only accessed.

Member Variables:
partID - A unique ID used to identify the specific Part object
name - The name to be displayed for the part
numSubImages - The number of images needed to render this part in the configurator image.
zRank - A 2d array specifying the zRank of the part in the configurator image. zRank[i][j] refers to the zRank of the i-th subImage in the j-th orientation of the configurator image.
options - An array of Option objects, which are selectable options for this part
defaultOptionID - The ID of the default Option object for this option.
onFrame - Boolean indicating whether the part is part of the frame

public functions:
Getters: getID(), getName(), getNumSubImages(), getZRanks(), getOptions(), getDefaultOptionID()
getNumOptions() - Returns the length of options array
getOption(opID) - Searches options for Option with optionID = opID. If found returns Option object, else returns null
getOptionByName(oName) - Searches options for Option with name = oName. If found returns Option object, else returns null
getOptionByIndex(index) - Returns options[index], if index is within array bounds
getDefaultOption() - Returns option with optionID = defaultOptionID
getZRank(subImageIndex, angle) - returns zRank[subImageIndex][angle], angle refers to the angle orientation of the configurator image
getOptionColor(oID, cID) - returns Color object with colorID = cID and part of Option object with objectID = oID

--------------------------------------------------------------------------

1d) Measure (measureFactory.js)

A Measure is a measurement that needs to be taken for a Frame.  Measurements incldue back seat height, wheel radius, seat depth, etc. Once created, a Measure object shouldn't be modified - only accessed.

Member variables:
measureID - A unique Id used to identify the specific measure object
measureOptions - A 2d array of strings representing the options for the given measurement in different unit systems. measureOptions[i][j] is the j-th option in the i-th system
weights - An array of weights representing the weight for each measure option. weight[j] is the weight for measureOptions[i][j]
prices - An array of prices representing the price for each measure option.
name - The name to be displayed for the given measure
desc - A short description of the measurement
details - A more detailed write up of the measurement
tip - A small tip on how to choose the correct option
units - An array of the names of the different unit systems
videoURL - A URL for the tutorial video for this measurement
imageURLS - An array of urls for an image carousel
gifURL - A url for a gif summarizing the measurement

Public functions:
Getters
getOption(unitSys, index) - Returns measureOptions[unitSys][index]
getWeight(index) - Returns weights[index]
getPrice(index) - Returns prices[index]

---------------------------------------------------------------------------

1e) Frame (frameFactory.js)

A Frame is a set of data for a type of wheelchair. Once created, a Frame shouldn't be modified - only accessed.

Member variables:
frameID - A unique id used to identify the specific frame object
manufacturer - Manufacturer of the frame
name - Name to be displayed for the frame
desc - Description of the frame
basePrice - The base price of the frame with default options.
baseWeight - The base weight of the frame with default options
imageURL - A Url for the image of the frame
parts - Array of Part objects for the frame
measures - Array of Measure objects for the frame

Public functions:
Getters
getPart(pID) - Searches parts for Part with partID = pID. If found returns Part object, else returns null
getPartByName(pName) - Searches parts for Part with name = pName. If found returns Part object, else returns null
getPartByIndex(index) - Returns parts[index], if index is within array bounds
getMeasure(mID) - Searches measures for Measure with measureID = mID. If found returns Measure object, else returns null
getMeasureByName(mName) - Searches measures for Measure with name = mName. If found returns Measure object, else returns null
getMeasureByIndex(index) - Returns measures[index], if index is within array bounds
getPartOption(partID, optionID) - returns Option object with optionID and part of Part object with partID
getPartOptionColor(partID, optionID, colorID) - Traverses down object chain to find correct color
getMeasureOption(measureID, optionIndex) - Returns appropriate option for given measure in the frame


---------------------------------------------------------------------------

1f) Wheelchair (wheelchairFactory.js)

A Wheelchair is a design generated by the user.  When the user chooses a frame on the Frames page, a new Wheelchair object is created.  Given the chosen frame, the wheelchair creates two arrays to track chosen options, colors, and measureOptions.  The Wheelchair then sets these to their default values.  As the user modifies their design on the abacus page, the wheelchair object gets modified.  This class has various methods for modifying its values as well as getting aggregate results such as total weight and total price.  The Wheelchair object does not contain direct references to Frame, Part, Option, Color, and Measure objects - only their IDs.

Member variables:
frameID - the frameID of the chosen frame
title - A user given name for the wheelchair
parts - An array of {partID, optionID, colorID, sizeIndex}. Each array element represents a color, option and size selection for a part
measures - An array of {measureID, measureOptionIndex}. Each element represents a measurement selection
previewImageGenerator - A helper object used to render the configurator image
inCurOrder - A boolean value indicating whether the wheelchair is in the current order.

public functions:
Getters
getAll() - Returns all members variables except the previewImageGenerator. This is enough to reconstruct the wheelchair object later
getPart(pID) - Returns {partID, optionID, colorID} from parts where partID = pID
getPartByIndex(index) - Returns parts[index]
getOptionIDForPart(pID)- Returns optionID for part with partID = pID
getColorIDForPart(pID) - Returns colorID for part with partID = pID
getMeasure(mID) - Returns {measureID, measureOptionIndex] from measures where measureID = mID
getMeasureByIndex(index) - Returns measures[index]
getOptionIndexForMeasure(mID) - Returns measureOptionIndex for measure with measureId=mID
getPartDetails(pID, unitSys) - Returns the name of the part, selected option and color, weight(in given unitSys) and price for the part with pID
getMeasureDetails(mID, unitSys) - Returns name of the measure, the selected option(in unitSys), the eight, the price, and the selected option(in alt unitSys)
getPreviewImages(angle) - Returns an array of images in zRank order that create the preview image for the given angle orientation.
setOptionForPart(pID, oID) - Sets optionID to oID for part with partID pID.
SetColorForPart(pID, cID) - Sets colorID to cID for part with partID pID.
SetSizeForPart(pID, sizeIndex) - Sets sizeIndex for part with partID pID.
setOptionAndColorForPart(pID, oID, cID)
setOptionAndSizeForPart(pID, oID, sizeIndex)
SetOptionIndexForMeasure(mID, index)
toggleInOrder() - Toggles whether the wheelchair is in the current order.
getTotalWeight()
getTotalPrice()

----------------------------------------------------------------------------

1g) PreviewImage (previewImageFactory.js)

A PreviewImage is a helper class used by Wheelchair to generate its preview image.  Unless you are modifying how the preview image array is generated, you should always just use Wheelchair.getPreviewImages()

----------------------------------------------------------------------------

1h) Order (orderFactory.js)

An Order is an object that tracks what the user is ordering.  This object contains an array of fully-designed wheelchairs and some aggregate functions regarding them.  Some of these include calculating subtotal, tax, and shipping fee.  In addition, the Order tracks information about the User and the state of the database when it is ordered (since that is subject to change).

Orders also track their sent date, and if an Order doesn't have a sent date, it is considered "unsent".  Whenever the user visits the Cart page [MyDesigns], a new unsent order is created for them.  This Order is then used as the "cart" through the entire ordering process.

----------------------------------------------------------------------------

2a) FrameData (frameDataService.js)

This service generates and keeps track of all the Frames.  When FrameData is first created, it pulls all frame data from the database and creates all of the Frame, Part, Option, Color, and Measure objects.  Accessing these objects should be done through FrameData (unless you already have a reference to a lower object).  If you think of the frame data as a tree, FrameData is the root.

----------------------------------------------------------------------------

2b) User (userService.js)

This service keeps track of the current user's data as well as the user's designs and orders.  The User service will track data whether or not the user is logged in - but will save data to the database if the user is logged in.  Login status can be found by the isLoggedIn() method.  The user service provides login() and logout() methods.

The User service also keeps track of the "currently-being-edited" wheelchair and order (getCurEditWheelchair and getCurEditOrder).  These are used by Abacus and Order pages to track changes made to them.

----------------------------------------------------------------------------

2c) Unit (unitService.js)

This service contains various enums and methods relating to units.  The UnitType enum contains IMPERIAL and METRIC.  The methods take a unit system and return an appropriate factor/string/etc.

----------------------------------------------------------------------------

2d) Angle (angleService.js)

This service contains various enums and methods relating to angles.  This is mostly used by the preview image generator.

----------------------------------------------------------------------------

2e) SyncJSON (syncJSONService.js)

This service provides a function that allows JSON files to be read syncronously rather than asyncronously.

----------------------------------------------------------------------------

2f) Drop (dropService.js)

This service allows control of the header dropdown from any controller.

----------------------------------------------------------------------------

3a) Cost (costConstant.js)

Constants relating to costs the user must pay, such as the shipping fee and taxes.

----------------------------------------------------------------------------

3b) Bank (bankConstant.js)

Constants regarding banking information.

